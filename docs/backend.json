{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Sprout Finance application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "User's phone number."
        },
        "googleId": {
          "type": "string",
          "description": "User's Google ID (if signed up with Google)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id"
      ]
    },
    "BankAccount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BankAccount",
      "type": "object",
      "description": "Represents a bank account linked to a user's profile.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the BankAccount entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N BankAccount)"
        },
        "bankName": {
          "type": "string",
          "description": "Name of the bank."
        },
        "accountNumber": {
          "type": "string",
          "description": "Bank account number (masked or encrypted)."
        },
        "accountType": {
          "type": "string",
          "description": "Type of bank account (e.g., checking, savings)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the bank account was linked.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId"
      ]
    },
    "Transaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Transaction",
      "type": "object",
      "description": "Represents a financial transaction.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Transaction entity."
        },
        "bankAccountId": {
          "type": "string",
          "description": "Reference to BankAccount. (Relationship: BankAccount 1:N Transaction)"
        },
        "amount": {
          "type": "number",
          "description": "Amount of the transaction."
        },
        "transactionDate": {
          "type": "string",
          "description": "Date of the transaction.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "Description of the transaction."
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to Category. (Relationship: Category 1:N Transaction)"
        },
        "transactionType": {
          "type": "string",
          "description": "The transaction type, could be debit or credit"
        }
      },
      "required": [
        "id",
        "bankAccountId"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category for classifying transactions (e.g., Food, Shopping, Travel).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Category entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the category."
        },
        "description": {
          "type": "string",
          "description": "Description of the category."
        },
        "isIncome": {
          "type": "boolean",
          "description": "Flag indicating if the category is for income (true) or expense (false)."
        }
      },
      "required": [
        "id"
      ]
    },
    "Loan": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Loan",
      "type": "object",
      "description": "Represents a loan taken by the user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Loan entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Loan)"
        },
        "loanName": {
          "type": "string",
          "description": "Name of the loan."
        },
        "principalAmount": {
          "type": "number",
          "description": "Original principal amount of the loan."
        },
        "interestRate": {
          "type": "number",
          "description": "Annual interest rate of the loan."
        },
        "loanTermMonths": {
          "type": "number",
          "description": "Loan term in months."
        },
        "startDate": {
          "type": "string",
          "description": "Date when the loan was taken.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId"
      ]
    },
    "AiAdvice": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AiAdvice",
      "type": "object",
      "description": "Stores AI generated financial advice for a given user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AI advice."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N AiAdvice)"
        },
        "adviceText": {
          "type": "string",
          "description": "The AI generated financial advice."
        },
        "generatedAt": {
          "type": "string",
          "description": "Timestamp of when the advice was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Uses path-based ownership, with '{userId}' corresponding to `request.auth.uid`.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/bankAccounts/{bankAccountId}",
        "definition": {
          "entityName": "BankAccount",
          "schema": {
            "$ref": "#/backend/entities/BankAccount"
          },
          "description": "Stores bank account information for a specific user. Includes 'userId' for authorization independence.  Path-based ownership enforced via `/users/{userId}`.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Auth UID."
            },
            {
              "name": "bankAccountId",
              "description": "The unique identifier for the bank account."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/bankAccounts/{bankAccountId}/transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Stores transaction data for a specific bank account. Includes 'bankAccountId' and 'userId' for authorization independence, inheriting ownership from BankAccount.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Auth UID."
            },
            {
              "name": "bankAccountId",
              "description": "The unique identifier for the bank account."
            },
            {
              "name": "transactionId",
              "description": "The unique identifier for the transaction."
            }
          ]
        }
      },
      {
        "path": "/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores transaction categories. This collection is global; no specific authorization context is enforced at the path level.",
          "params": [
            {
              "name": "categoryId",
              "description": "The unique identifier for the category."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/loans/{loanId}",
        "definition": {
          "entityName": "Loan",
          "schema": {
            "$ref": "#/backend/entities/Loan"
          },
          "description": "Stores loan information for a specific user. Includes 'userId' for authorization independence. Path-based ownership enforced via `/users/{userId}`.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Auth UID."
            },
            {
              "name": "loanId",
              "description": "The unique identifier for the loan."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/aiAdvice/{aiAdviceId}",
        "definition": {
          "entityName": "AiAdvice",
          "schema": {
            "$ref": "#/backend/entities/AiAdvice"
          },
          "description": "Stores AI-generated financial advice for a specific user. Includes 'userId' for authorization independence. Path-based ownership enforced via `/users/{userId}`.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, matching the Firebase Auth UID."
            },
            {
              "name": "aiAdviceId",
              "description": "The unique identifier for the AI advice."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to be secure, scalable, and debuggable, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). It leverages Structural Segregation to ensure that all documents within a collection share the same security requirements, and Access Modeling to standardize authorization patterns.\n\n**Authorization Independence (Denormalization):**\nTo avoid hierarchical authorization dependencies (`get()` calls in rules), we denormalize authorization data. For example, if access to BankAccounts depended on user attributes, those attributes would be copied into each BankAccount document.  Since BankAccounts, Transactions, Loans and AiAdvice all depend on User ownership, the `userId` field is present in these documents, enforcing ownership. The Category documents can be global, so no specific authorization is required, assuming the app manages these categories.\n\n**Structural Segregation:**\nData with different access needs are segregated into different collections. User-specific data (BankAccounts, Transactions, Loans, AiAdvice) are stored under `/users/{userId}` to enforce private, path-based ownership.\n\n**Access Modeling:**\nPath-based ownership is used for private data.  The `/users/{userId}/bankAccounts/{bankAccountId}` pattern clearly establishes ownership.  The `userId` field is also included within the `bankAccounts` documents themselves for Authorization Independence.\n\n**QAPs (Rules are not Filters):**\nThe structure supports secure `list` operations by ensuring that rules can be written without needing to filter data.  For example, listing bank accounts under `/users/{userId}/bankAccounts` only returns the bank accounts owned by the user identified by `{userId}`, based on path.\n\nTo address the original error \"FirebaseError: Firebase: Error (auth/operation-not-allowed)\", this likely indicates an issue with Firebase Authentication configuration (e.g., email/password sign-in not enabled) or an attempt to perform an operation (e.g., creating a user) without proper permissions or configuration. This data structure does not directly fix it, but will help in debugging the rules once Authentication is appropriately configured."
  }
}
    