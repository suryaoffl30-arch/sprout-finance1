/**
 * @fileoverview Firestore Security Rules for the Sprout Finance application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data,
 * ensuring that users can only access their own resources. Public data,
 * such as transaction categories, is readable by all users.
 *
 * Data Structure:
 * All user-specific data (BankAccounts, Transactions, Loans, AiAdvice) is nested
 * under `/users/{userId}`.  This structure enforces path-based authorization.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - The `categories` collection is publicly readable but should be managed by
 *   administrative functions (not covered in these rules).
 * - All write operations on user-owned data require authentication and
 *   ownership validation.
 *
 * Denormalization for Authorization:
 * - The `userId` field is included in BankAccount, Transaction, Loan, and
 *   AiAdvice documents to enable authorization independence and avoid costly
 *   `get()` calls in security rules.
 *
 * Structural Segregation:
 * - User-specific data is stored under the `/users/{userId}` path to ensure
 *   private access, while global data (categories) resides in a separate
 *   top-level collection with public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) Authenticated user reads, updates, or deletes their own profile.
     * @deny (create) Unauthenticated user attempts to create a profile.
     * @deny (update, delete) Authenticated user attempts to modify or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed

      // Allow user to create their own profile if the userId matches their auth.uid
      allow create: if isSignedIn() && isCreatingOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for bank accounts.
     * @path /users/{userId}/bankAccounts/{bankAccountId}
     * @allow (create) Authenticated user creates a bank account under their profile.
     * @allow (get, update, delete) Authenticated user reads, updates, or deletes their own bank account.
     * @deny (create) Unauthenticated user attempts to create a bank account.
     * @deny (update, delete) Authenticated user attempts to modify or delete another user's bank account.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/bankAccounts/{bankAccountId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for transactions.
     * @path /users/{userId}/bankAccounts/{bankAccountId}/transactions/{transactionId}
     * @allow (create) Authenticated user creates a transaction under their bank account.
     * @allow (get, update, delete) Authenticated user reads, updates, or deletes their own transaction.
     * @deny (create) Unauthenticated user attempts to create a transaction.
     * @deny (update, delete) Authenticated user attempts to modify or delete another user's transaction.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/bankAccounts/{bankAccountId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.bankAccountId == bankAccountId;
      allow update: if isExistingOwner(userId) && isOwner(userId) && request.resource.data.bankAccountId == resource.data.bankAccountId;
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Allows public read access to transaction categories. Write operations should be managed via trusted server.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read the categories.
     * @deny (create, update, delete) No client-side write operations are allowed.
     * @principle Public read access with restricted writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Enforces user-ownership for loans.
      * @path /users/{userId}/loans/{loanId}
      * @allow (create) Authenticated user creates a loan under their profile.
      * @allow (get, update, delete) Authenticated user reads, updates, or deletes their own loan.
      * @deny (create) Unauthenticated user attempts to create a loan.
      * @deny (update, delete) Authenticated user attempts to modify or delete another user's loan.
      * @principle Enforces document ownership for writes and validates relational integrity.
      */
    match /users/{userId}/loans/{loanId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for AI-generated advice.
     * @path /users/{userId}/aiAdvice/{aiAdviceId}
     * @allow (create) Authenticated user creates AI advice under their profile.
     * @allow (get, update, delete) Authenticated user reads, updates, or deletes their own AI advice.
     * @deny (create) Unauthenticated user attempts to create AI advice.
     * @deny (update, delete) Authenticated user attempts to modify or delete another user's AI advice.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /users/{userId}/aiAdvice/{aiAdviceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isCreatingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}